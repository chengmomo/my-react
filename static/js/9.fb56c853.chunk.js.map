{"version":3,"sources":["components/CustomBreadcrumb/index.js","pages/AntCom/FormDemo/index.js"],"names":["CustomBreadcrumb","props","style","marginBottom","Item","to","arr","map","item","key","title","residences","value","label","children","FormDemo","create","state","confirmDirty","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","validateToNextPassword","rule","callback","validateFields","force","validateToFirstPassword","getFieldValue","handleConfirmBlur","target","setState","getFieldDecorator","this","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","Option","className","visibilityHeight","gutter","id","onSubmit","rules","required","message","prefix","type","color","placeholder","hasFeedback","valuePropName","htmlType","mode","Group","disabled","marks","0","20","40","60","80","100","min","max","showTime","format","RangePicker","whitespace","options","addonBefore","validator","Password","onBlur","styles","affixBox","offsetTop","affix","Link","href","React","Component","position","top","right"],"mappings":"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","file":"static/js/9.fb56c853.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Breadcrumb} from 'antd'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst CustomBreadcrumb = (props) => (\r\n  <Breadcrumb style={{marginBottom: 16}}>\r\n    <Breadcrumb.Item><Link to='/home'>首页</Link></Breadcrumb.Item>\r\n    {props.arr && props.arr.map(item => {\r\n      if ((typeof item) === 'object') {\r\n        return <Breadcrumb.Item key={item.title}><Link to={item.to}>{item.title}</Link></Breadcrumb.Item>\r\n      } else {\r\n        return <Breadcrumb.Item key={item}>{item}</Breadcrumb.Item>\r\n      }\r\n    })}\r\n  </Breadcrumb>\r\n)\r\nexport default CustomBreadcrumb\r\n","import React from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  Icon,\r\n  Tooltip,\r\n  Select,\r\n  DatePicker,\r\n  Slider,\r\n  Switch,\r\n  Rate,\r\n  InputNumber,\r\n  Cascader,\r\n  BackTop,\r\n  Affix,\r\n  Anchor\r\n} from 'antd';\r\nimport CustomBreadcrumb from \"../../../components/CustomBreadcrumb\";\r\nimport './index.css';\r\n\r\nconst residences = [\r\n  {\r\n    value: 'zhejiang',\r\n    label: 'Zhejiang',\r\n    children: [\r\n      {\r\n        value: 'hangzhou',\r\n        label: 'Hangzhou',\r\n        children: [\r\n          {\r\n            value: 'xihu',\r\n            label: 'West Lake',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: 'jiangsu',\r\n    label: 'Jiangsu',\r\n    children: [\r\n      {\r\n        value: 'nanjing',\r\n        label: 'Nanjing',\r\n        children: [\r\n          {\r\n            value: 'zhonghuamen',\r\n            label: 'Zhong Hua Men',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@Form.create()\r\nclass FormDemo extends React.Component {\r\n  state = {\r\n    confirmDirty: false\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  };\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const {form} = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], {force: true});\r\n    }\r\n    callback();\r\n  };\r\n  validateToFirstPassword = (rule, value, callback) => {\r\n    const {form} = this.props;\r\n    if (value && value !== form.getFieldValue('firstPassword')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n  handleConfirmBlur = e => {\r\n    const {value} = e.target;\r\n    this.setState({confirmDirty: this.state.confirmDirty || !!value});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {getFieldDecorator} = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 8},\r\n      },\r\n      wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 16},\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {span: 24, offset: 0},\r\n        sm: {span: 16, offset: 8},\r\n      }\r\n    };\r\n    const OtherItemLayout = {\r\n      labelCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 6},\r\n      },\r\n      wrapperCol: {\r\n        xs: {span: 24},\r\n        sm: {span: 17, offset: 1},\r\n      },\r\n    };\r\n\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n      initialValue: '86',\r\n    })(\r\n      <Select style={{width: 70}}>\r\n        <Select.Option value=\"86\">+86</Select.Option>\r\n        <Select.Option value=\"87\">+87</Select.Option>\r\n      </Select>,\r\n    );\r\n\r\n    return (\r\n      <div className='wrap'>\r\n        <CustomBreadcrumb arr={['ant', 'form']}/>\r\n        <BackTop visibilityHeight={100}/>\r\n        <Row gutter={20}>\r\n          <Col span={12}>\r\n            <Card title='Login' id='login'>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <Form.Item>\r\n                  {\r\n                    getFieldDecorator('userName', {\r\n                      rules: [{\r\n                        required: true,\r\n                        message: 'Please input your userName!',\r\n                      }]\r\n                    })(\r\n                      <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                             placeholder=\"Username\"/>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item hasFeedback>\r\n                  {\r\n                    getFieldDecorator('password', {\r\n                      rules: [{\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                      }]\r\n                    })(<Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\r\n                              type=\"password\"\r\n                              placeholder=\"Password\"/>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  {\r\n                    getFieldDecorator('remember', {\r\n                      valuePropName: 'checked',\r\n                      initialValue: true,\r\n                    })(<Checkbox>Remember me</Checkbox>)\r\n                  }\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Login\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Card>\r\n            <Card title='Other' id='other'>\r\n              <Form {...OtherItemLayout} onSubmit={this.handleSubmit}>\r\n                <Form.Item label=\"Select[multiple]\">\r\n                  {getFieldDecorator('select-multiple', {\r\n                    rules: [\r\n                      {required: true, message: 'Please select your favourite colors!', type: 'array'},\r\n                    ],\r\n                  })(\r\n                    <Select mode=\"multiple\" placeholder=\"Please select favourite colors\">\r\n                      <Select.Option value=\"red\">Red</Select.Option>\r\n                      <Select.Option value=\"green\">Green</Select.Option>\r\n                      <Select.Option value=\"blue\">Blue</Select.Option>\r\n                    </Select>,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item label=\"Radio.Group\">\r\n                  {getFieldDecorator('radio-group')(\r\n                    <Radio.Group>\r\n                      <Radio value=\"a\">item 1</Radio>\r\n                      <Radio value=\"b\">item 2</Radio>\r\n                      <Radio value=\"c\">item 3</Radio>\r\n                    </Radio.Group>,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item label=\"Checkbox.Group\">\r\n                  {getFieldDecorator('checkbox-group', {\r\n                    initialValue: ['A', 'B'],\r\n                  })(\r\n                    <Checkbox.Group style={{width: '100%'}}>\r\n                      <Row>\r\n                        <Col span={6}>\r\n                          <Checkbox value=\"A\">A</Checkbox>\r\n                        </Col>\r\n                        <Col span={6}>\r\n                          <Checkbox disabled value=\"B\">\r\n                            B\r\n                          </Checkbox>\r\n                        </Col>\r\n                        <Col span={6}>\r\n                          <Checkbox value=\"C\">C</Checkbox>\r\n                        </Col>\r\n                        <Col span={6}>\r\n                          <Checkbox value=\"D\">D</Checkbox>\r\n                        </Col>\r\n                      </Row>\r\n                    </Checkbox.Group>\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item label=\"Rate\">\r\n                  {getFieldDecorator('rate', {\r\n                    initialValue: 3.5,\r\n                  })(<Rate/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Slider\">\r\n                  {getFieldDecorator('slider')(\r\n                    <Slider\r\n                      marks={{\r\n                        0: 'A',\r\n                        20: 'B',\r\n                        40: 'C',\r\n                        60: 'D',\r\n                        80: 'E',\r\n                        100: 'F',\r\n                      }}\r\n                    />,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item label=\"Switch\">\r\n                  {getFieldDecorator('switch', {valuePropName: 'checked'})(<Switch/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"InputNumber\">\r\n                  {getFieldDecorator('input-number', {initialValue: 3})(<InputNumber min={1} max={10}/>)}\r\n                  <span className=\"ant-form-text\"> machines</span>\r\n                </Form.Item>\r\n              </Form>\r\n            </Card>\r\n            <Card title='DatePicker' id='picker'>\r\n              <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n                <Form.Item label=\"DatePicker[showTime]\">\r\n                  {getFieldDecorator('date-picker', {\r\n                    rules: [{type: 'object', required: true, message: 'Please select time!'}]\r\n                  })(<DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\"/>\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item label=\"RangePicker[showTime]\">\r\n                  {getFieldDecorator('range-time-picker', {\r\n                    rules: [{type: 'array', required: true, message: 'Please select time!'}]\r\n                  })(\r\n                    <DatePicker.RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\"/>,\r\n                  )}\r\n                </Form.Item>\r\n              </Form>\r\n            </Card>\r\n            <Card title='Register' id='register'>\r\n              <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n                <Form.Item\r\n                  label={\r\n                    <span>\r\n                      Nickname&nbsp;\r\n                      <Tooltip title=\"What do you want others to call you?\">\r\n                        <Icon type=\"question-circle-o\"/>\r\n                      </Tooltip>\r\n                    </span>\r\n                  }\r\n                >\r\n                  {getFieldDecorator('nickname', {\r\n                    rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\r\n                  })(<Input/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Habitual Residence\">\r\n                  {getFieldDecorator('residence', {\r\n                    initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n                    rules: [\r\n                      {type: 'array', required: true, message: 'Please select your habitual residence!'},\r\n                    ],\r\n                  })(<Cascader options={residences}/>)}\r\n                </Form.Item>\r\n                <Form.Item label='phone'>\r\n                  {getFieldDecorator('phone', {\r\n                    rules: [{\r\n                      required: true,\r\n                      message: 'Please input your phone!',\r\n                    }]\r\n                  })(<Input addonBefore={prefixSelector} style={{width: '100%'}}/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"E-mail\">\r\n                  {getFieldDecorator('email', {\r\n                    rules: [\r\n                      {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                      },\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                      },\r\n                    ],\r\n                  })(<Input/>)}\r\n                </Form.Item>\r\n                <Form.Item label='password' hasFeedback>\r\n                  {\r\n                    getFieldDecorator('firstPassword', {\r\n                      rules: [{\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                      }, {\r\n                        validator: this.validateToNextPassword,\r\n                      },]\r\n                    })(<Input.Password/>)\r\n                  }\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                  {getFieldDecorator('confirm', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                      },\r\n                      {\r\n                        validator: this.validateToFirstPassword,\r\n                      },\r\n                    ],\r\n                  })(<Input.Password onBlur={this.handleConfirmBlur}/>)}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                  {\r\n                    getFieldDecorator('agreement', {\r\n                      valuePropName: 'checked',\r\n                      // initialValue: true,\r\n                    })(<Checkbox>I have read the agreement</Checkbox>)\r\n                  }\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Register\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Card>\r\n          </Col>\r\n          {/*<Col span={12}>*/}\r\n          {/*</Col>*/}\r\n        </Row>\r\n        {/*使用HashRouter点击Anchor页面会跳转*/}\r\n        <Affix style={styles.affixBox}>\r\n          <Anchor offsetTop={80} affix={true}>\r\n            <Anchor.Link href=\"#login\" title=\"login demo\"/>\r\n            <Anchor.Link href=\"#other\" title=\"other demo\"/>\r\n            <Anchor.Link href=\"#picker\" title=\"picker demo\"/>\r\n            <Anchor.Link href=\"#register\" title=\"register demo\"/>\r\n          </Anchor>\r\n        </Affix>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  affixBox: {\r\n    position: 'absolute',\r\n    top: 100,\r\n    right: 50,\r\n    // with: 300,\r\n  }\r\n}\r\n\r\nexport default FormDemo\r\n\r\n"],"sourceRoot":""}